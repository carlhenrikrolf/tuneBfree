name: build
run-name: build
on: [push]
jobs:
  build_linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Build
        run: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y git make libjack-dev libopengl-dev libftgl-dev libglu1-mesa-dev libwebp-dev xxd g++
            OUTPUT_DIR=tuneBfree_$(date +%Y%m%d)_$(git rev-parse --short HEAD)_linux
            echo output_dir=$OUTPUT_DIR >> $GITHUB_ENV
            mkdir $OUTPUT_DIR
            make
            cp -r build/* $OUTPUT_DIR
            cd src
            cmake -B build
            cmake --build build
            cp build/tuneBfree.clap ../$OUTPUT_DIR
            rm -r build
            cmake -B build -D CLAP_GUI=TRUE
            cmake --build build
            cp build/tuneBfree.clap ../$OUTPUT_DIR/tuneBfreeGUI.clap
            cd ..
            cd libs/clap-wrapper
            cmake -B build -DCLAP_WRAPPER_OUTPUT_NAME=tuneBfree -DCLAP_WRAPPER_DOWNLOAD_DEPENDENCIES=TRUE
            cmake --build build
            cp -r build/Release/tuneBfree.vst3/ ../../$OUTPUT_DIR
            cd ../..
            ls $OUTPUT_DIR
            ls $OUTPUT_DIR/tuneBfree.lv2
      - name: Test
        run: |
            git clone https://github.com/ODDSound/MTS-ESP.git ~/MTS-ESP
            sudo mkdir -p /usr/local/lib
            sudo cp ~/MTS-ESP/libMTS/Linux/x86_64/libMTS.so /usr/local/lib/
            python3 -m venv .env
            source .env/bin/activate
            git clone --recurse-submodules https://github.com/narenratan/mtsespy.git ~/mtsespy
            python3 -m pip install ~/mtsespy
            python3 -m pip install pytest
            pytest -k 'not regression' tests
      - uses: actions/upload-artifact@v4
        with:
            name: ${{ env.output_dir }}
            path: ${{ env.output_dir }}
  build_mac:
    runs-on: macos-14
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Import code signing certificates
        uses: apple-actions/import-codesign-certs@v2
        with:
            p12-file-base64: ${{ secrets.DEV_ID_APP_CERT }}
            p12-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
      - name: Build
        run: |
            brew install jack freeglut ftgl bzip2 pkg-config webp
            OUTPUT_DIR=tuneBfree_$(date +%Y%m%d)_$(git rev-parse --short HEAD)_mac
            echo output_dir=$OUTPUT_DIR >> $GITHUB_ENV
            mkdir $OUTPUT_DIR
            make
            cp -R build/* $OUTPUT_DIR
            cd src
            cmake -B build
            cmake --build build
            codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v build/tuneBfree.clap --deep --strict --timestamp
            cp build/tuneBfree.clap ../$OUTPUT_DIR
            rm -r build
            cmake -B build -D CLAP_GUI=TRUE
            cmake --build build
            codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v build/tuneBfree.clap --deep --strict --timestamp
            cp build/tuneBfree.clap ../$OUTPUT_DIR/tuneBfreeGUI.clap
            cd ..
            cp $OUTPUT_DIR/tuneBfree.clap .
            cp $OUTPUT_DIR/tuneBfreeGUI.clap .
            zip $OUTPUT_DIR.zip tuneBfree.clap tuneBfreeGUI.clap
            xcrun notarytool submit $OUTPUT_DIR.zip --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --team-id ${{ secrets.TEAM_ID }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --wait
            ls $OUTPUT_DIR
            ls $OUTPUT_DIR/tuneBfree.lv2
      - name: Test
        run: |
            git clone https://github.com/ODDSound/MTS-ESP.git ~/MTS-ESP
            sudo mkdir -p "/Library/Application Support/MTS-ESP/"
            sudo cp ~/MTS-ESP/libMTS/Mac/x86_64_ARM/libMTS.dylib "/Library/Application Support/MTS-ESP/libMTS.dylib"
            python3 -m venv .env
            source .env/bin/activate
            git clone --recurse-submodules https://github.com/narenratan/mtsespy.git ~/mtsespy
            python3 -m pip install ~/mtsespy
            python3 -m pip install pytest
            pytest -k 'not regression' tests
      - uses: actions/upload-artifact@v4
        with:
            name: ${{ env.output_dir }}
            path: ${{ env.output_dir }}
  build_windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
                git
                make
                vim
                mingw-w64-ucrt-x86_64-gcc
                mingw-w64-ucrt-x86_64-jack2
                mingw-w64-ucrt-x86_64-freeglut
                mingw-w64-ucrt-x86_64-ftgl
                mingw-w64-ucrt-x86_64-pkg-config
      - name: Build
        run: |
          make
          OUTPUT_DIR=tuneBfree_$(date +%Y%m%d)_$(git rev-parse --short HEAD)_windows
          echo output_dir=$OUTPUT_DIR >> $GITHUB_ENV
          cp -r build $OUTPUT_DIR
          ls $OUTPUT_DIR
          ls $OUTPUT_DIR/tuneBfree.lv2
      - name: Test
        run: |
            git clone https://github.com/narenratan/libjack64_dll.git ~/libjack64_dll
            cp ~/libjack64_dll/libjack64.dll .
            python3 -m venv .env
            source .env/bin/activate
            python3 -m pip install pytest
            pytest tests/test_basic.py
      - uses: actions/upload-artifact@v4
        with:
            name: ${{ env.output_dir }}
            path: ${{ env.output_dir }}
  build_windows_clap:
    runs-on: windows-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Build
        run: |
          ./libs/vcpkg/bootstrap-vcpkg.bat
          ./libs/vcpkg/vcpkg.exe install pkgconf:x64-windows-static cairo:x64-windows-static libwebp:x64-windows-static
          $OUTPUT_DIR = "tuneBfree_$(date +%Y%m%d)_$(git rev-parse --short HEAD)_windows_clap"
          echo output_dir=$OUTPUT_DIR >> $env:GITHUB_ENV
          mkdir $OUTPUT_DIR
          cd src
          cmake -B build
          cmake --build build --config Release
          cp build/Release/tuneBfree.clap ../$OUTPUT_DIR
          rm -r build
          cmake -B build -D CLAP_GUI=TRUE
          cmake --build build --config Release
          cp build/Release/tuneBfree.clap ../$OUTPUT_DIR/tuneBfreeGUI.clap
      - uses: actions/upload-artifact@v4
        with:
            name: ${{ env.output_dir }}
            path: ${{ env.output_dir }}
  doctest_tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Doctest tests
        run: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y git make libjack-dev libftgl-dev libglu1-mesa-dev xxd g++
            cd src
            export EXPORTED_VERSION=1.0
            make tests
  sanitizer_tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Build
        run: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y git make libjack-dev libftgl-dev libglu1-mesa-dev libwebp-dev xxd g++
            export SANITIZE=yes
            make
      - name: Test with sanitizers
        run: |
            git clone https://github.com/ODDSound/MTS-ESP.git ~/MTS-ESP
            sudo mkdir -p /usr/local/lib
            sudo cp ~/MTS-ESP/libMTS/Linux/x86_64/libMTS.so /usr/local/lib/
            python3 -m venv .env
            source .env/bin/activate
            git clone --recurse-submodules https://github.com/narenratan/mtsespy.git ~/mtsespy
            python3 -m pip install ~/mtsespy
            python3 -m pip install pytest
            pytest -k 'not regression' tests
  regression_tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
            submodules: 'true'
      - name: Build
        run: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y git make libjack-dev libftgl-dev libglu1-mesa-dev libwebp-dev xxd g++
            export DEBUG_TONEGEN_OSC=yes
            make
      - name: Regression test
        run: |
            git clone https://github.com/ODDSound/MTS-ESP.git ~/MTS-ESP
            sudo mkdir -p /usr/local/lib
            sudo cp ~/MTS-ESP/libMTS/Linux/x86_64/libMTS.so /usr/local/lib/
            python3 -m venv .env
            source .env/bin/activate
            git clone --recurse-submodules https://github.com/narenratan/mtsespy.git ~/mtsespy
            python3 -m pip install ~/mtsespy
            python3 -m pip install pytest
            pytest tests/test_regression.py
